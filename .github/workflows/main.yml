name: Android Kernel Build (vili sm8350)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 0'

env:
  KERNEL_REPO: "https://github.com/sm8350-vili/android_kernel_xiaomi_sm8350.git"
  KERNEL_BRANCH: "15.2"
  DEVICE_NAME: "vili"
  ARCH: "arm64"
  DEFCONFIG: "vendor/lahaina-qgki_defconfig vendor/debugfs.config vendor/xiaomi_QGKI.config"
  CLANG_REPO: "https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b"
  CLANG_BRANCH: "lineage-20.0"
  GCC_AARCH64_REPO: "https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-gnu-9.3"
  GCC_AARCH64_BRANCH: "lineage-22.2"
  GCC_ARM_REPO: "https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9"
  GCC_ARM_BRANCH: "lineage-19.1"
  KERNEL_DIR: "sm8350"
  ANYKERNEL_DIR: "anykernel3"
  TOOLCHAIN_DIR: "toolchain"
  OUTPUT_DIR: "out"
  BOARD_KERNEL_PAGESIZE: "4096"
  BOARD_KERNEL_BASE: "0x00000000"
  BOARD_BOOT_HEADER_VERSION: "3"
  BOARD_KERNEL_IMAGE_NAME: "Image"
  # Android OS version and security patch level
  ANDROID_OS_VERSION: "15.2"
  ANDROID_SECURITY_PATCH: "2025-05"

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc "/usr/local/share/boost" "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/apt-packages.list') }}-${{ github.run_number }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential bc bison flex libssl-dev libelf-dev git rsync zip \
          python3 python3-pip curl wget ccache ninja-build lz4 zstd \
          device-tree-compiler cpio xz-utils
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        ccache -M 5G
        mkdir -p ${GITHUB_WORKSPACE}/${OUTPUT_DIR}
        mkdir -p ${GITHUB_WORKSPACE}/build_output

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ env.DEVICE_NAME }}-${{ hashFiles('**/Makefile') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ env.DEVICE_NAME }}-${{ hashFiles('**/Makefile') }}-
          ${{ runner.os }}-ccache-${{ env.DEVICE_NAME }}-
          ${{ runner.os }}-ccache-

    - name: Cache toolchain
      uses: actions/cache@v4
      id: toolchain-cache
      with:
        path: ${{ env.TOOLCHAIN_DIR }}
        key: ${{ runner.os }}-toolchain-${{ env.CLANG_BRANCH }}-${{ env.GCC_AARCH64_BRANCH }}-${{ env.GCC_ARM_BRANCH }}
        restore-keys: |
          ${{ runner.os }}-toolchain-${{ env.CLANG_BRANCH }}-${{ env.GCC_AARCH64_BRANCH }}-
          ${{ runner.os }}-toolchain-${{ env.CLANG_BRANCH }}-
          ${{ runner.os }}-toolchain-

    - name: Cache kernel source
      uses: actions/cache@v4
      id: kernel-cache
      with:
        path: ${{ env.KERNEL_DIR }}
        key: ${{ runner.os }}-kernel-${{ env.KERNEL_BRANCH }}-${{ github.run_number }}
        restore-keys: |
          ${{ runner.os }}-kernel-${{ env.KERNEL_BRANCH }}-

    - name: Setup kernel source
      run: |
        if [ "${{ steps.kernel-cache.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss - cloning fresh repository"
          rm -rf ${GITHUB_WORKSPACE}/${KERNEL_DIR}
          git clone --depth=1 --single-branch --branch=${KERNEL_BRANCH} \
            ${KERNEL_REPO} ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        else
          echo "Cache hit - updating existing repository"
          if [ -d "${GITHUB_WORKSPACE}/${KERNEL_DIR}/.git" ]; then
            cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
            git fetch origin ${KERNEL_BRANCH}
            git reset --hard origin/${KERNEL_BRANCH}
          else
            echo "Cached directory exists but not a git repository - re-cloning"
            rm -rf ${GITHUB_WORKSPACE}/${KERNEL_DIR}
            git clone --depth=1 --single-branch --branch=${KERNEL_BRANCH} \
              ${KERNEL_REPO} ${GITHUB_WORKSPACE}/${KERNEL_DIR}
          fi
        fi
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        echo "Latest commit: $(git log --oneline -1)"

    - name: Clone AnyKernel3
      run: |
        if [ ! -d "${GITHUB_WORKSPACE}/${ANYKERNEL_DIR}" ]; then
          git clone --depth=1 https://github.com/misakazip/AnyKernel3.git ${GITHUB_WORKSPACE}/${ANYKERNEL_DIR}
        fi

    - name: Download Lineage toolchain
      if: steps.toolchain-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/${TOOLCHAIN_DIR}
        cd ${GITHUB_WORKSPACE}/${TOOLCHAIN_DIR}
        git clone --depth=1 --single-branch --branch=${CLANG_BRANCH} ${CLANG_REPO} clang
        git clone --depth=1 --single-branch --branch=${GCC_AARCH64_BRANCH} ${GCC_AARCH64_REPO} gcc-aarch64
        git clone --depth=1 --single-branch --branch=${GCC_ARM_BRANCH} ${GCC_ARM_REPO} gcc-arm

    - name: Setup toolchain environment
      run: |
        CLANG_PATH="${GITHUB_WORKSPACE}/${TOOLCHAIN_DIR}/clang/bin"
        GCC_AARCH64_PATH="${GITHUB_WORKSPACE}/${TOOLCHAIN_DIR}/gcc-aarch64/bin"
        GCC_ARM_PATH="${GITHUB_WORKSPACE}/${TOOLCHAIN_DIR}/gcc-arm/bin"
        echo "PATH=${CLANG_PATH}:${GCC_AARCH64_PATH}:${GCC_ARM_PATH}:${PATH}" >> $GITHUB_ENV
        echo "CLANG_PATH=${CLANG_PATH}" >> $GITHUB_ENV
        ${CLANG_PATH}/clang --version
        ${GCC_AARCH64_PATH}/aarch64-buildroot-linux-gnu-gcc --version
        ${GCC_ARM_PATH}/arm-linux-androideabi-gcc --version

    - name: Configure kernel
      run: |
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        export ARCH=${ARCH} SUBARCH=${ARCH}
        export CROSS_COMPILE=aarch64-buildroot-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-androideabi-
        export CC=clang CLANG_TRIPLE=aarch64-buildroot-linux-gnu-
        if [ "${{ steps.build-cache.outputs.cache-hit }}" != "true" ]; then
          make clean && make mrproper
        fi
        make O=${GITHUB_WORKSPACE}/${OUTPUT_DIR} ${DEFCONFIG}

    - name: Build kernel
      run: |
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        export ARCH=${ARCH} SUBARCH=${ARCH}
        export CROSS_COMPILE=aarch64-buildroot-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-androideabi-
        export CC=clang CLANG_TRIPLE=aarch64-buildroot-linux-gnu-
        export LLVM=1 LLVM_IAS=1
        THREADS=$(nproc --all)
        clang --version
        aarch64-buildroot-linux-gnu-gcc --version | head -1
        arm-linux-androideabi-gcc --version | head -1
        ccache -s
        make O=${GITHUB_WORKSPACE}/${OUTPUT_DIR} \
          ARCH=${ARCH} \
          CC=clang \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-buildroot-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi- \
          LLVM=1 LLVM_IAS=1 -j${THREADS} \
          Image dtbs
        ccache -s

    - name: Build DTB image
      run: |
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        DTB_FILES=$(find ${GITHUB_WORKSPACE}/${OUTPUT_DIR}/arch/arm64/boot/dts -name "*.dtb" | sort)
        if [ -n "$DTB_FILES" ]; then
          cat $DTB_FILES > ${GITHUB_WORKSPACE}/${OUTPUT_DIR}/dtb.img
          cp $DTB_FILES ${GITHUB_WORKSPACE}/build_output/
        fi

    - name: Create boot image
      run: |
        KERNEL_IMAGE="${GITHUB_WORKSPACE}/${OUTPUT_DIR}/arch/arm64/boot/Image"
        DTB_IMAGE="${GITHUB_WORKSPACE}/${OUTPUT_DIR}/dtb.img"
        BUILD_DATE=$(date +%Y%m%d-%H%M)

        git clone https://github.com/LineageOS/android_system_tools_mkbootimg.git mkbootimg
        cd mkbootimg/
        if [ -f "$KERNEL_IMAGE" ]; then
          cp "$KERNEL_IMAGE" ${GITHUB_WORKSPACE}/build_output/
          
          # Create cmdline with complete parameters
          echo "androidboot.console=ttyMSM0 androidboot.hardware=qcom androidboot.memcg=1 androidboot.usbcontroller=a600000.dwc3 cgroup.memory=nokmem,nosocket console=ttyMSM0,115200n8 loop.max_part=7 msm_rtb.filter=0x237 service_locator.enable=1 swiotlb=0 pcie_ports=compat iptable_raw.raw_before_defrag=1 ip6table_raw.raw_before_defrag=1" > ${GITHUB_WORKSPACE}/build_output/cmdline.txt

          echo "Creating boot image..."
          echo "OS Version: ${ANDROID_OS_VERSION}"
          echo "Security Patch: ${ANDROID_SECURITY_PATCH}"
          
          if [ -f "$DTB_IMAGE" ]; then
            cp "$DTB_IMAGE" ${GITHUB_WORKSPACE}/build_output/
            
            # Create boot.img with DTB
            python3 ./mkbootimg.py \
              --kernel "$KERNEL_IMAGE" \
              --dtb "$DTB_IMAGE" \
              --cmdline "$(cat ${GITHUB_WORKSPACE}/build_output/cmdline.txt)" \
              --base ${BOARD_KERNEL_BASE} \
              --kernel_offset 0x00008000 \
              --ramdisk_offset 0x01000000 \
              --tags_offset 0x00000100 \
              --pagesize ${BOARD_KERNEL_PAGESIZE} \
              --header_version ${BOARD_BOOT_HEADER_VERSION} \
              --os_version ${ANDROID_OS_VERSION} \
              --os_patch_level ${ANDROID_SECURITY_PATCH} \
              --output ${GITHUB_WORKSPACE}/build_output/boot-${DEVICE_NAME}-${BUILD_DATE}.img
          else
            # Create boot.img without DTB
            python3 ./mkbootimg.py \
              --kernel "$KERNEL_IMAGE" \
              --cmdline "$(cat ${GITHUB_WORKSPACE}/build_output/cmdline.txt)" \
              --base ${BOARD_KERNEL_BASE} \
              --kernel_offset 0x00008000 \
              --ramdisk_offset 0x01000000 \
              --tags_offset 0x00000100 \
              --pagesize ${BOARD_KERNEL_PAGESIZE} \
              --header_version ${BOARD_BOOT_HEADER_VERSION} \
              --os_version ${ANDROID_OS_VERSION} \
              --os_patch_level ${ANDROID_SECURITY_PATCH} \
              --output ${GITHUB_WORKSPACE}/build_output/boot-${DEVICE_NAME}-${BUILD_DATE}.img
          fi
          
          echo "Boot image created: boot-${DEVICE_NAME}-${BUILD_DATE}.img"
          ls -la ${GITHUB_WORKSPACE}/build_output/boot-*.img
        fi

    - name: Extract build artifacts
      run: |
        KERNEL_IMAGE="${GITHUB_WORKSPACE}/${OUTPUT_DIR}/arch/arm64/boot/Image"
        if [ -f "${KERNEL_IMAGE}" ]; then
          cp ${KERNEL_IMAGE} ${GITHUB_WORKSPACE}/build_output/
        fi
        ls -la ${GITHUB_WORKSPACE}/build_output/

    - name: Package with AnyKernel3
      run: |
        cd ${GITHUB_WORKSPACE}/${ANYKERNEL_DIR}
        rm -f Image.gz Image zImage dtb *.img
        cat > anykernel.sh << 'EOF'
        # AnyKernel3 Script
        properties() { '
        kernel.string=vili kernel build
        do.devicecheck=0
        do.modules=0
        do.systemless=1
        do.cleanup=1
        do.cleanuponabort=0
        device.name1=vili
        device.name2=
        supported.versions=14,15,16
        supported.patchlevels=
        '; }
        block=/dev/block/bootdevice/by-name/boot;
        is_slot_device=true;
        ramdisk_compression=lz4;
        patch_vbmeta_flag=auto;
        boot_header_version=3;
        kernel_offset=0x00008000;
        ramdisk_offset=0x01000000;
        tags_offset=0x00000100;
        page_size=4096;
        base=0x00000000;
        . tools/ak3-core.sh;
        set_perm_recursive 0 0 755 644 $ramdisk/*;
        set_perm_recursive 0 0 750 750 $ramdisk/init* $ramdisk/sbin;
        dump_boot;
        write_boot;
        ## end install
        EOF
        if [ -f "${GITHUB_WORKSPACE}/build_output/Image" ]; then
          cp ${GITHUB_WORKSPACE}/build_output/Image ./
        fi
        if [ -f "${GITHUB_WORKSPACE}/build_output/dtb.img" ]; then
          cp ${GITHUB_WORKSPACE}/build_output/dtb.img ./dtb
        fi
        BUILD_DATE=$(date +%Y%m%d-%H%M)
        zip -r9 ${GITHUB_WORKSPACE}/build_output/${DEVICE_NAME}-kernel-${BUILD_DATE}.zip \
          * -x .git README.md *placeholder

    - name: Generate build info
      run: |
        cd ${GITHUB_WORKSPACE}/${KERNEL_DIR}
        BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S UTC")
        KERNEL_VERSION=$(make kernelversion 2>/dev/null || echo "Unknown")
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_MESSAGE=$(git log --oneline -1)
        CLANG_VER=$(clang --version | head -1)
        GCC_AARCH64_VER=$(aarch64-buildroot-linux-gnu-gcc --version | head -1)
        GCC_ARM_VER=$(arm-linux-androideabi-gcc --version | head -1)
        BUILT_FILES=""
        if [ -f "${GITHUB_WORKSPACE}/build_output/Image" ]; then
          BUILT_FILES="${BUILT_FILES}\n- Image ($(du -h ${GITHUB_WORKSPACE}/build_output/Image | cut -f1))"
        fi
        if [ -f "${GITHUB_WORKSPACE}/build_output/dtb.img" ]; then
          BUILT_FILES="${BUILT_FILES}\n- dtb.img ($(du -h ${GITHUB_WORKSPACE}/build_output/dtb.img | cut -f1))"
        fi
        if ls ${GITHUB_WORKSPACE}/build_output/boot-*.img 1> /dev/null 2>&1; then
          for boot in ${GITHUB_WORKSPACE}/build_output/boot-*.img; do
            BUILT_FILES="${BUILT_FILES}\n- $(basename $boot) ($(du -h $boot | cut -f1))"
          done
        fi
        if ls ${GITHUB_WORKSPACE}/build_output/*.zip 1> /dev/null 2>&1; then
          for zip in ${GITHUB_WORKSPACE}/build_output/*.zip; do
            BUILT_FILES="${BUILT_FILES}\n- $(basename $zip) ($(du -h $zip | cut -f1))"
          done
        fi
        cat > ${GITHUB_WORKSPACE}/build_output/build_info.txt << EOF
        Android Kernel Build Information
        ================================
        Build Date: ${BUILD_DATE}
        Builder: misakazip
        Kernel Information:
        - Version: ${KERNEL_VERSION}
        - Architecture: ${ARCH}
        - Defconfig: ${DEFCONFIG}
        - Device: ${DEVICE_NAME}
        Boot Image Configuration:
        - Header Version: ${BOARD_BOOT_HEADER_VERSION}
        - Page Size: ${BOARD_KERNEL_PAGESIZE}
        - Base Address: ${BOARD_KERNEL_BASE}
        - Kernel Image Name: ${BOARD_KERNEL_IMAGE_NAME}
        - Android OS Version: ${ANDROID_OS_VERSION}
        - Security Patch Level: ${ANDROID_SECURITY_PATCH}
        Source Information:
        - Repository: ${KERNEL_REPO}
        - Branch: ${KERNEL_BRANCH}
        - Commit: ${COMMIT_HASH}
        - Message: ${COMMIT_MESSAGE}
        Toolchain Information:
        - Clang: ${CLANG_VER}
        - GCC aarch64: ${GCC_AARCH64_VER}
        - GCC arm: ${GCC_ARM_VER}
        - Clang Branch: ${CLANG_BRANCH}
        - GCC aarch64 Branch: ${GCC_AARCH64_BRANCH}
        - GCC arm Branch: ${GCC_ARM_BRANCH}
        Built Files:${BUILT_FILES}
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-kernel-${{ env.DEVICE_NAME }}-${{ env.ARCH }}-${{ github.run_number }}
        path: |
          build_output/*.zip
          build_output/*.img
          build_output/Image
          build_output/*.dtb
          build_output/build_info.txt
          build_output/cmdline.txt
        retention-days: 30
        compression-level: 9

    - name: Create release
      if: (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: kernel-${{ env.DEVICE_NAME }}-${{ github.run_number }}
        name: Android Kernel Build - ${{ env.DEVICE_NAME }} (${{ env.ARCH }})
        body: |
          ## Android Kernel Build

          **Build Information:**
          - Device: ${{ env.DEVICE_NAME }}
          - Architecture: ${{ env.ARCH }}
          - Defconfig: ${{ env.DEFCONFIG }}
          - Build Date: ${{ github.run_number }}
          - Builder: misakazip

          **Boot Configuration:**
          - Header Version: ${{ env.BOARD_BOOT_HEADER_VERSION }}
          - Page Size: ${{ env.BOARD_KERNEL_PAGESIZE }}
          - Base Address: ${{ env.BOARD_KERNEL_BASE }}
          - Kernel Image: ${{ env.BOARD_KERNEL_IMAGE_NAME }}
          - Android OS Version: ${{ env.ANDROID_OS_VERSION }}
          - Security Patch: ${{ env.ANDROID_SECURITY_PATCH }}

          **Source:**
          - Repository: ${{ env.KERNEL_REPO }}
          - Branch: ${{ env.KERNEL_BRANCH }}

          **Toolchain (LineageOS):**
          - Clang: ${{ env.CLANG_BRANCH }}
          - GCC aarch64: ${{ env.GCC_AARCH64_BRANCH }}
          - GCC arm: ${{ env.GCC_ARM_BRANCH }}

          **Built Files:**
          - 📦 AnyKernel3 flashable zip
          - 🥾 Boot image (boot.img) - Ready to flash
          - 🐧 Kernel image (Image)
          - 🌳 Device tree blob image (dtb.img)
          - 📄 Build information

          **Installation:**
          1. Flash the AnyKernel3 zip via custom recovery (recommended)
          2. Or flash the boot.img directly via fastboot: `fastboot flash boot boot-vili-YYYYMMDD-HHMM.img`
        files: |
            build_output/*.zip
            build_output/boot-*.img
            build_output/*.img
            build_output/build_info.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup
      if: always()
      run: |
        ccache -s
        df -h
